{"version":3,"sources":["components/Global/images/logo.svg","components/Global/Header.js","components/Global/Content.js","components/Global/Footer.js","data/menu.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","_this$props","this","props","title","items","react_default","a","createElement","className","src","logo","alt","map","item","key","Component","Content","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","count","number1","number2","result","handleCountClick","bind","assertThisInitialized","handleInputChanged","handleResultClick","setState","e","target","id","Number","value","onClick","type","placeholder","onChange","Footer","_this$props$copyright","copyright","menu","url","App","Global_Header","Global_Content","Global_Footer","Boolean","window","location","hostname","match","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a5607846.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//Dependencies\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\n//Assets\nimport logo from './images/logo.svg';\nimport './css/header.css';\n\nclass Header extends Component {\n  static propTypes = {\n    title: PropTypes.string.isRequired,\n    items: PropTypes.array.isRequired\n  };\n\n  render() {\n    const { title, items} = this.props;\n    return (\n      <div className=\"Header\">\n        <div className=\"Logo\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n          <h2>{title}</h2>\n\n          <ul className=\"Menu\">\n            {items && items.map((item, key) => <li key={key}>{item.title}</li>)}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","//Dependencies\nimport React, { Component } from 'react';\n\n//Assets\nimport './css/App.css';\n\nclass Content extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      count: 0,\n      number1: 0,\n      number2: 0,\n      result: 0\n    };\n\n    this.handleCountClick = this.handleCountClick.bind(this);\n    this.handleInputChanged = this.handleInputChanged.bind(this);\n    this.handleResultClick = this.handleResultClick.bind(this);\n\n  }\n  componentDidMount() {\n    this.setState({\n      count: 1\n    });\n\n  }\n\n  handleCountClick(e) {\n    if(e.target.id === 'add') {\n      this.setState({\n        count: this.state.count + 1\n      });\n    } else if(e.target.id === 'subtract' && this.state.count > 0) {\n      this.setState({\n        count: this.state.count - 1\n      });\n    } else if(e.target.id === 'reset') {\n      this.setState({\n        count: 0\n      });\n    }\n\n  }\n\n  handleResultClick(e){\n    this.setState({\n      result: this.state.number1 + this.state.number2\n    });\n  }\n\n  handleInputChanged(e){\n    if (e.target.id === 'number1'){\n      this.setState({\n        number1: Number(e.target.value)\n      });\n    } else{\n      this.setState({\n        number2: Number(e.target.value)\n      });\n    }\n  }\n  render() {\n    return (\n      <div className=\"Content\">\n        <h2>Counter : {this.state.count}</h2>\n        <p>\n          <button id=\"add\" onClick={this.handleCountClick}>+</button>\n          <button id=\"subtract\" onClick={this.handleCountClick}>-</button>\n          <button id=\"reset\" onClick={this.handleCountClick}>Reset</button>\n        </p>\n\n        <h2>Calculator</h2>\n        <input id=\"number1\" type=\"number\" placeholder=\"Number 1\" value={this.setState.number1} onChange={this.handleInputChanged} />\n        <input id=\"number2\" type=\"number\" placeholder=\"Number 2\" value={this.setState.number2} onChange={this.handleInputChanged} />\n        <button id=\"result\" onClick={this.handleResultClick}>=</button>\n        {this.state.result}\n      </div>\n    );\n  }\n}\n \nexport default Content;\n","//Dependencies\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n//Assets\nimport './css/footer.css';\n\nclass Footer extends Component {\n    static propTypes = {\n        copyright: PropTypes.string\n    };\n    render() {\n        const { copyright = '&copy; React 2018' } = this.props;\n        return (\n        <div className=\"Footer\">\n            <h1>{copyright}</h1>\n            \n        </div>\n        );\n    }\n}\n\nexport default Footer;\n","export default [\r\n    {\r\n      title: 'Home',\r\n      url: '/'\r\n    },\r\n    {\r\n        title: 'Blog',\r\n        url: '/blog'\r\n    },\r\n    {\r\n      title: 'About Us',\r\n      url: '/about'\r\n    },\r\n    {\r\n      title: 'Contact Us',\r\n      url: '/contact'\r\n    },\r\n    {\r\n      title: 'Library',\r\n      url: '/library'\r\n    }\r\n  ];","//Dependencies\nimport React, { Component } from 'react';\n\n// Components\nimport Header from './Global/Header';\nimport Content from './Global/Content';\nimport Footer from './Global/Footer';\n\n//Data\nimport items from '../data/menu';\n///\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header title=\"ReactMyApp\" items={items}/>\n        <Content />\n        <Footer copyright=\"&copy; eapb96 2018\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}